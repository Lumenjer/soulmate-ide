{"id":"src/simulator/code.ts","dependencies":[{"name":"/Users/elliottkember/Sites/soulmate/soulmate-electron-2/.babelrc","includedInParent":true,"mtime":1591030182213},{"name":"/Users/elliottkember/Sites/soulmate/soulmate-electron-2/package.json","includedInParent":true,"mtime":1591031028027}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.prepareCode = void 0;\n\nexports.prepareCode = function (code, rows, cols) {\n  return (\"#define FASTLED_INTERNAL\\n#include \\\"FastLED.h\\\"\\n\\n// LEDs pin\\n#define DATA_PIN 12\\n\\n// Matrix size\\n#define LED_ROWS \" + rows + \"\\n#define LED_COLS \" + cols + \"\\n#define N_LEDS LED_ROWS * LED_COLS\\n#define N_CELLS N_LEDS\\n\\nclass FakeSoulmate {\\n  public:\\n  // Define the array of leds\\n  CRGB leds[N_LEDS];\\n};\\n\\nFakeSoulmate Soulmate;\\n\\nint16_t gridIndexHorizontal(int16_t x, int16_t y) {\\n  if (y > LED_ROWS) return -1;\\n  if (x > LED_COLS) return -1;\\n  if (x < 0) return -1;\\n  if (y < 0) return -1;\\n\\n  int16_t index = 0;\\n  if (y % 2 == 1) {\\n    index = y * LED_COLS + x;\\n  } else {\\n    index = y * LED_COLS + LED_COLS - 1 - x;\\n  }\\n\\n  if (index > -1 && index < N_LEDS) {\\n    return index;\\n  } else {\\n    return -1;\\n  }\\n}\\n\\nvoid setup() {\\n  FastLED.addLeds<NEOPIXEL, DATA_PIN>(Soulmate.leds, N_LEDS);\\n  FastLED.setBrightness(255);\\n}\\n\\nnamespace Pattern {\\n  \" + code + \"\\n}\\n\\nvoid loop() {\\n  Pattern::draw();\\n  FastLED.show();\\n}\\n\").trim();\n};"},"sourceMaps":{"js":{"mappings":[{"source":"src/simulator/code.ts","name":null,"original":{"line":1,"column":13},"generated":{"line":8,"column":0}},{"source":"src/simulator/code.ts","name":null,"original":{"line":1,"column":13},"generated":{"line":8,"column":7}},{"source":"src/simulator/code.ts","name":null,"original":{"line":1,"column":13},"generated":{"line":8,"column":8}},{"source":"src/simulator/code.ts","name":null,"original":{"line":1,"column":13},"generated":{"line":8,"column":19}},{"source":"src/simulator/code.ts","name":null,"original":{"line":1,"column":27},"generated":{"line":8,"column":22}},{"source":"src/simulator/code.ts","name":null,"original":{"line":1,"column":28},"generated":{"line":8,"column":32}},{"source":"src/simulator/code.ts","name":null,"original":{"line":1,"column":27},"generated":{"line":8,"column":36}},{"source":"src/simulator/code.ts","name":null,"original":{"line":1,"column":34},"generated":{"line":8,"column":38}},{"source":"src/simulator/code.ts","name":null,"original":{"line":1,"column":27},"generated":{"line":8,"column":42}},{"source":"src/simulator/code.ts","name":null,"original":{"line":1,"column":40},"generated":{"line":8,"column":44}},{"source":"src/simulator/code.ts","name":null,"original":{"line":1,"column":27},"generated":{"line":8,"column":48}},{"source":"src/simulator/code.ts","name":null,"original":{"line":1,"column":44},"generated":{"line":8,"column":50}},{"source":"src/simulator/code.ts","name":null,"original":{"line":2,"column":2},"generated":{"line":9,"column":0}},{"source":"src/simulator/code.ts","name":null,"original":{"line":2,"column":2},"generated":{"line":9,"column":9}},{"source":"src/simulator/code.ts","name":null,"original":{"line":2,"column":2},"generated":{"line":9,"column":10}},{"source":"src/simulator/code.ts","name":null,"original":{"line":9,"column":19},"generated":{"line":9,"column":136}},{"source":"src/simulator/code.ts","name":null,"original":{"line":2,"column":2},"generated":{"line":9,"column":140}},{"source":"src/simulator/code.ts","name":null,"original":{"line":9,"column":23},"generated":{"line":9,"column":143}},{"source":"src/simulator/code.ts","name":null,"original":{"line":2,"column":2},"generated":{"line":9,"column":164}},{"source":"src/simulator/code.ts","name":null,"original":{"line":10,"column":19},"generated":{"line":9,"column":167}},{"source":"src/simulator/code.ts","name":null,"original":{"line":2,"column":2},"generated":{"line":9,"column":171}},{"source":"src/simulator/code.ts","name":null,"original":{"line":10,"column":23},"generated":{"line":9,"column":174}},{"source":"src/simulator/code.ts","name":null,"original":{"line":2,"column":2},"generated":{"line":9,"column":900}},{"source":"src/simulator/code.ts","name":null,"original":{"line":48,"column":4},"generated":{"line":9,"column":903}},{"source":"src/simulator/code.ts","name":null,"original":{"line":2,"column":2},"generated":{"line":9,"column":907}},{"source":"src/simulator/code.ts","name":null,"original":{"line":48,"column":8},"generated":{"line":9,"column":910}},{"source":"src/simulator/code.ts","name":null,"original":{"line":2,"column":2},"generated":{"line":9,"column":976}},{"source":"src/simulator/code.ts","name":null,"original":{"line":55,"column":2},"generated":{"line":9,"column":978}},{"source":"src/simulator/code.ts","name":null,"original":{"line":2,"column":2},"generated":{"line":9,"column":982}},{"source":"src/simulator/code.ts","name":null,"original":{"line":2,"column":2},"generated":{"line":9,"column":984}},{"source":"src/simulator/code.ts","name":null,"original":{"line":55,"column":8},"generated":{"line":10,"column":0}},{"source":"src/simulator/code.ts","name":null,"original":{"line":1,"column":13},"generated":{"line":10,"column":1}}],"sources":{"src/simulator/code.ts":"export const prepareCode = (code, rows, cols) =>\n  `#define FASTLED_INTERNAL\n#include \"FastLED.h\"\n\n// LEDs pin\n#define DATA_PIN 12\n\n// Matrix size\n#define LED_ROWS ${rows}\n#define LED_COLS ${cols}\n#define N_LEDS LED_ROWS * LED_COLS\n#define N_CELLS N_LEDS\n\nclass FakeSoulmate {\n  public:\n  // Define the array of leds\n  CRGB leds[N_LEDS];\n};\n\nFakeSoulmate Soulmate;\n\nint16_t gridIndexHorizontal(int16_t x, int16_t y) {\n  if (y > LED_ROWS) return -1;\n  if (x > LED_COLS) return -1;\n  if (x < 0) return -1;\n  if (y < 0) return -1;\n\n  int16_t index = 0;\n  if (y % 2 == 1) {\n    index = y * LED_COLS + x;\n  } else {\n    index = y * LED_COLS + LED_COLS - 1 - x;\n  }\n\n  if (index > -1 && index < N_LEDS) {\n    return index;\n  } else {\n    return -1;\n  }\n}\n\nvoid setup() {\n  FastLED.addLeds<NEOPIXEL, DATA_PIN>(Soulmate.leds, N_LEDS);\n  FastLED.setBrightness(255);\n}\n\nnamespace Pattern {\n  ${code}\n}\n\nvoid loop() {\n  Pattern::draw();\n  FastLED.show();\n}\n`.trim();\n"},"lineCount":null}},"error":null,"hash":"9dcd50c54bae761c8ab43b59f5a55c44","cacheData":{"env":{}}}